/*
 * generated by Xtext 2.23.0
 */
package feri.bsc.rm.generator

import feri.bsc.rm.myRobotMovement.InitializationStat
import feri.bsc.rm.myRobotMovement.MoveObject
import feri.bsc.rm.myRobotMovement.Repetition
import feri.bsc.rm.myRobotMovement.RobotType
import feri.bsc.rm.myRobotMovement.GenericStmt
import feri.bsc.rm.myRobotMovement.SpeedOption
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/*/
import feri.bcs.rm.myRobotMovement.Repetition
import feri.bcs.rm.myRobotMovement.GenericStmt
import feri.bcs.rm.myRobotMovement.MoveObject
import feri.bcs.rm.myRobotMovement.InitializationStat
import feri.bcs.rm.myRobotMovement.SpeedOption
import feri.bcs.rm.myRobotMovement.RobotType
*/

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

class Globals{
	public static var nl = "\n"	
	public static val names = newArrayList('thumbservo', 'indexservo', 'middleservo', 'ringservo', 'littleservo')
}
 
class MyRobotMovementGenerator extends AbstractGenerator {
	IRobotArm hand
	var globalDelay = 0
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = ""
		
		// ROBOT TYPE
		var command = resource.allContents.filter(RobotType).toIterable.get(0);
		if (command.rt == 'bionic')	
			hand = new BionicRobotHand()
		else if (command.rt == 'arduino')			
			hand = new ArduinoRobotHand()

		
		// LIBRARIES 
		result += hand.libraries.includesTemplate(resource, fsa) 
		
		//GLOBALS
		globalDelay = hand.calibration.readGlobalDelay(resource)
		
		// CALIBRATION
		result += hand.calibration.setupTemplate(resource) 

		//REPEAT
		result += hand.repeat.repeatStart() 	
		
		for (rep : resource.allContents.filter(Repetition).toIterable) {
			result += hand.repeat.eval(rep, globalDelay)
		}
		result += hand.repeat.repeatEnd() 

		// GENERATE FILE
		IGenerate.output(fsa, hand.fileName(resource), result)
	}	
}


abstract class IRobotArm {
	def ICalibration calibration()
	def ILibrary libraries()
	def IRepeat repeat()
	def String fileName(Resource resource)
}

class BionicRobotHand extends IRobotArm{
	RobotArmLibrary libraries
	RobotArmCalibration calibration
	RobotArmRepeat repeat
	new (){
		libraries = new RobotArmLibrary()
		calibration = new RobotArmCalibration()				
		repeat = new RobotArmRepeat()			
	}
	override ICalibration calibration(){
		return calibration
	}
	override ILibrary libraries(){
		return libraries
	}
	override IRepeat repeat (){
		return repeat
	}
	override String fileName(Resource resource) {
		return (new RobotArmFileName).fileName(resource);
	}
}

class ArduinoRobotHand extends IRobotArm{
	ArduinoLibrary libraries
	ArduinoCalibration calibration
	ArduinoRepeat repeat
	new (){
		libraries = new ArduinoLibrary()
		calibration = new ArduinoCalibration()				
		repeat = new ArduinoRepeat()			
	}
	override ICalibration calibration(){
		return calibration
	}
	override ILibrary libraries(){
		return libraries
	}
	override IRepeat repeat (){
		return repeat
	}
	override String fileName(Resource resource) {
		return (new ArduinoFileName).fileName(resource);
	}
	
}

abstract class ILibrary {
	def String includesTemplate(Resource resource, IFileSystemAccess2 fsa)
}

class RobotArmLibrary extends ILibrary{
	override String includesTemplate(Resource resource, IFileSystemAccess2 fsa){
		return "#include <Servo.h>" + Globals.nl
			+ "Servo " + Globals.names.get(0) + ", "
			+ "Servo " + Globals.names.get(1) + ", "
			+ "Servo " + Globals.names.get(2) + ", "
			+ "Servo " + Globals.names.get(3) + ", "
			+ "Servo " + Globals.names.get(4) + "; " + Globals.nl
			+ "int times = 0;" + Globals.nl + Globals.nl
	}
}

class ArduinoLibrary extends ILibrary{
	override String includesTemplate(Resource resource, IFileSystemAccess2 fsa){
		var fingerh = "#ifndef FINGER_H\n#define FINGER_H\n\n#include <Servo.h>\n\n\nclass Finger\n{\n  private:\n    Servo m_motor;\n    int   m_port;\n    bool  m_reverse;\n    int   m_minPos;\n    int   m_maxPos;\n    int   m_position;\n    int   m_range;\n    \n  public:\n    Finger(int port);\n    Finger(int port, bool reverse);\n    Finger(int port, bool reverse, int minPos, int maxPos);\n\n    void init();\n\n    int getMinPos();\n    int getMaxPos();\n    int getPosition();\n\n    int move(int percent);\n};\n\n#endif\n\n"
		fsa.generateFile(resource.URI.lastSegment.replace(".rm", "\\") + 'Finger.h', fingerh)
		var fingercpp = "#include \"Finger.h\"\n\nFinger::Finger(int port): Finger(port, false, 0, 255)\n{\n}\n\nFinger::Finger(int port, bool reverse): Finger(port, reverse, 0, 255)\n{\n}\n\nFinger::Finger(int port, bool reverse, int minPos, int maxPos)\n{\n  m_port=port;\n  m_reverse=reverse;\n  m_minPos=minPos;\n  m_maxPos=maxPos;\n  m_range=m_maxPos-m_minPos;\n}\n\nvoid Finger::init()\n{\n  m_motor.attach(m_port);\n  move(m_minPos);\n}\n\nint Finger::getMinPos()\n{\n  return m_minPos;\n}\n\nint Finger::getMaxPos()\n{\n  return m_maxPos;\n}\n\nint Finger::getPosition()\n{\n  return m_position;\n}\n\nint Finger::move(int percent)\n{\n  if (percent<0)\n    m_position=0;\n  else if (percent>100)\n    m_position=100;\n  else\n    m_position=percent;\n\n  int mo=0;\n  if (m_reverse==false)\n    mo=m_minPos+(m_range*m_position/100);\n  else\n    mo=m_maxPos-(m_range*m_position/100);\n\n\n  m_motor.write(mo);\n\n  return mo;\n}\n\n"
		fsa.generateFile(resource.URI.lastSegment.replace(".rm", "\\") + 'Finger.cpp', fingercpp)
		
		return "#include \"Finger.h\"" + Globals.nl
			+ "Finger " + Globals.names.get(0) + "(3, false, 17, 120);" + Globals.nl
			+ "Finger " + Globals.names.get(1) + "(5, false, 3, 120);" + Globals.nl
			+ "Finger " + Globals.names.get(2) + "(6, false, 3, 120);" + Globals.nl
			+ "Finger " + Globals.names.get(3) + "(9, false, 1, 120);" + Globals.nl
			+ "Finger " + Globals.names.get(4) + "(10, false, 3, 120);" + Globals.nl
			+ "int times = 0;" + Globals.nl + Globals.nl
		}
}
/** INCLUDE END*/

/** SETUP  START*/
abstract class ICalibration {
	def String setupTemplate(Resource resource){
		return setupStart() + getSerial()  + Globals.nl + uploadModeStart() + pinAttach() + Globals.nl + startPosition(resource) + Globals.nl + uploadModeEnd() + Globals.nl + setupEnd() + Globals.nl + Globals.nl 
	}
 	def String setupStart(){		
		return "void setup()" + Globals.nl + "{" + Globals.nl
	}
	
	def String uploadModeStart()
	def String uploadModeEnd()
	def int readGlobalDelay(Resource resource)
 	def String pinAttach()
	def String getSerial()	
	def String startPosition(Resource resource)	
	def setupEnd(){
		return "}"
	}
}

class RobotArmCalibration extends ICalibration{
	RobotArmPins pins
	IServos servos
	var int brate
	
	new(){
		pins = new RobotArmPins(Globals.names, 5, 6, 9, 10, 11)
		servos = new RobotArmServos(Globals.names, 10, 160, 160, 160, 10)
		brate = 9600
	}
	 
	override String uploadModeStart(){ return ""}
	override String uploadModeEnd(){ return ""}
	 
 	override String pinAttach(){		
		return pins.attachPins() 
	}
	
 	override String getSerial(){		
		return "Serial.begin("+ brate + ");" + Globals.nl
	}
	
	override startPosition(Resource resource){	
		var result = ""
		for (command : resource.allContents.filter(InitializationStat).toIterable) {
			// SPEC STAT
			if (command.sps !== null){	
				var ss = command.sps as GenericStmt
				result += GenericStmtCodeGen.eval(ss, servos)
			}
		}
		return result; //+ servos.writePositions();
	}
	
	override int readGlobalDelay(Resource resource){
		for (command : resource.allContents.filter(InitializationStat).toIterable) {
			//result += "SPEED COMMAND" + command.toString() + "\n"
			// SPEED
			if (command.ss !== null){	// speed
				var ss = command.ss as SpeedOption
				if (ss.so == "slow")
					return 1000
				else if (ss.so == "medium")
					return 500
				else if (ss.so == "fast")
					return 100
			}
		}		
	}	
}

class ArduinoCalibration extends ICalibration{
	IPins pins
	IServos servos
	var int brate
	
	new(){
		pins = new ArduinoPins(Globals.names, 5, 6, 9, 10, 11)
		servos = new ArduinoServos(Globals.names, 100, 100, 100, 100, 100)
		brate = 9600
	}
	 
	override String uploadModeStart(){ return "pinMode(12, INPUT);"+ Globals.nl + "if (!digitalRead(12)){" + Globals.nl }
	override String uploadModeEnd(){ return "}" + Globals.nl}
	 
	 
 	override String pinAttach(){		
		return pins.attachPins() 
	}
	
 	override String getSerial(){		
		return "Serial.begin("+ brate + ");" + Globals.nl
	}
	
	override startPosition(Resource resource){	
		var result = ""
		for (command : resource.allContents.filter(InitializationStat).toIterable) {
			// SPEC STAT
			if (command.sps !== null){	
				var ss = command.sps as GenericStmt
				result += GenericStmtCodeGen.eval(ss, servos);
			}
		}
		return result; //+ servos.writePositions();
	}
	
	override int readGlobalDelay(Resource resource){
		for (command : resource.allContents.filter(InitializationStat).toIterable) {
			//result += "SPEED COMMAND" + command.toString() + "\n"
			// SPEED
			if (command.ss !== null){	// speed
				var ss = command.ss as SpeedOption
				if (ss.so == "slow")
					return 1000
				else if (ss.so == "medium")
					return 500
				else if (ss.so == "fast")
					return 100
			}
		}		
	}	
}
/** SETUP  END*/

/** LOOP START */
abstract class IRepeat {
	def String eval(Repetition rep, int delay)
 	def String repeatStart(){		
		return "void loop()" + Globals.nl + "{" + Globals.nl
	}

	def repeatEnd(){
		return "}" + Globals.nl
	}
	def String uploadModeStart()
	def String uploadModeEnd()	
}

class RobotArmRepeat extends IRepeat{
	RobotArmServos servos
	
	new(){
		servos = new RobotArmServos(Globals.names, 10, 160, 160, 160, 10)

	}
	override String uploadModeStart() { return ""}
	override String uploadModeEnd() { return ""}
	 
	override String eval(Repetition rep, int delay) {
		var result = ""
		
		// REPETITION CONDITION
		if (rep.times != 0){
			result += "if(times < " + rep.times + ")" + Globals.nl
			result += "{" + Globals.nl
			result += "times++;" + Globals.nl
		}
		else if (rep.wt != 0){  // repeat with time 
			// TODO
		}
		
		// REPETITION STATEMENTS
		for (command : rep.eContents) {
			if (command instanceof GenericStmt){
				var ss = command as GenericStmt
				result += GenericStmtCodeGen.eval(ss, new RobotArmServos(Globals.names, 10, 160, 160, 160, 10));
			}
			if (delay != 0){
				result += "delay(" + delay + ");" + Globals.nl;
			}
			result +=  Globals.nl	
			
		}
		result +=  Globals.nl	
		return result
	}
}

class ArduinoRepeat extends IRepeat{
	IServos servos
	
	new(){
		servos = new ArduinoServos(Globals.names, 100, 100, 100, 100, 100)
	} 
	
	override String uploadModeStart(){ return "if (!digitalRead(12)){" + Globals.nl }
	override String uploadModeEnd(){ return "}" + Globals.nl}
	 	
	override String eval(Repetition rep, int delay) {
		var result = uploadModeStart()
		
		// REPETITION CONDITION
		if (rep.times != 0){
			result += "if(times < " + rep.times + ")" + Globals.nl
			result += "{" + Globals.nl
			result += "times++;" + Globals.nl
		}
		else if (rep.wt != 0){  // repeat with time 
			// TODO
		}
		
		// REPETITION STATEMENTS
		for (command : rep.eContents) {
			if (command instanceof GenericStmt){
				var ss = command as GenericStmt
				result += GenericStmtCodeGen.eval(ss, servos);
			}
			if (delay != 0){
				result += "delay(" + delay + ");" + Globals.nl;
			}
			result +=  Globals.nl	
			
		}
		result += uploadModeEnd() + Globals.nl	
		return result
	}
}
/** LOOP END */

/** SERVOS START*/
abstract class IServos{
	protected var List<Integer> servos = new ArrayList
	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		servos.add(i1)
		servos.add(i2)
		servos.add(i3)
		servos.add(i4)
		servos.add(i5)
		//Globals.names = ns
	}
	def int getServoValue(int i) {
		return servos.get(i)
	}
	def Integer setServoValue(int i, int value) {
		servos.set(i, value)
	}
	def Integer openServo(int i)
	def Integer closeServo(int i)
		
	def String writePositions() 
	def int max()
	def int min()	
}

class RobotArmServos extends IServos{
	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		super(ns, i1, i2, i3, i4, i5)
		
	}
	override String writePositions() {
		var result = ""
		for (var i = 0; i<servos.size; i++) {
			result += Globals.names.get(i) + ".write(" + getServoValue(i) + ");" + Globals.nl;
		}
		return result;
	}	
	override Integer openServo(int i){
		if(i==1 || i==5)
			servos.set(i-1, max())
		else
			servos.set(i-1, min())					
	}
	override Integer closeServo(int i){
		if(i==1 || i==5)
			servos.set(i-1, min())
		else
			servos.set(i-1, max())			
	}
	override int max() { return 160 }
	override int min() { return 10 }	
}

class ArduinoServos extends IServos{
	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		super(ns, i1, i2, i3, i4, i5)
	}
	override String writePositions() {
		var result = ""
		for (var i = 0; i<servos.size; i++) {
			result += Globals.names.get(i) + ".move(" + getServoValue(i) + ");" + Globals.nl;
		}
		return result;
	}	
	override Integer openServo(int i){
		servos.set(i-1, min())					
	}
	override Integer closeServo(int i){
		servos.set(i-1, max())			
	}	
	override int max() { return 100 }
	override int min() { return 0 }	
}
/** SERVOS END*/

/** PINS START*/
abstract class IPins{
	protected var List<Integer> servos = new ArrayList

	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		servos.add(i1)
		servos.add(i2)
		servos.add(i3)
		servos.add(i4)
		servos.add(i5)
		//names = ns
	}
	def int getServoPinValue(Integer i) {
		return servos.get(i)
	}	
	def String attachPins()
}

class RobotArmPins extends IPins{
	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		super(ns, i1, i2, i3, i4, i5)
	}
	override String attachPins() {
		var result = ""
		for (var i = 0; i<servos.size; i++) {
			result += Globals.names.get(i) + ".attach(" + getServoPinValue(i) + ");" + Globals.nl;
		}
		return result;
	}	
}

class ArduinoPins extends IPins{
	new(String[] ns, Integer i1, Integer i2, Integer i3, Integer i4, Integer i5){
		super(ns, i1, i2, i3, i4, i5)
	}
	override String attachPins() {
		var result = ""
//		result += "PINS INIT" + Globals.nl;
		for (var i = 0; i<servos.size; i++) {
//			result += "PIN" + Globals.nl;
			result += Globals.names.get(i) + ".init(" + ");" + Globals.nl; // getServoPinValue(i) + ");" + Globals.nl;
		}
		return result;
	}	
}
/** PINS END */

/** GENERATION START */
abstract class IGenerate{
	public static def void output(IFileSystemAccess2 fsa, String file, String program){
		fsa.generateFile(file, program)		
	}
}

class RobotArmGenerate extends IGenerate{
	
}

class ArduinoGenerate extends IGenerate{
	
}
/** GENERATION STOP */

/** TRAVERSE PARSE TREE */ 
class GenericStmtCodeGen {
	static def String eval(GenericStmt ss, IServos servos) {
		var result = ""
		// OPEN STATEMENT 
		if (ss.oo !== null){	// open 
			var mo = ss.oo as MoveObject
			//OPEN FIGER					
			if (mo.firstObj != 0){
				// OPEN FINGER e.g. 1-5
				if (mo.lastObj != 0){
					for(var i=mo.firstObj; i<=mo.lastObj; i++){
						servos.openServo(i)
					}
					result += servos.writePositions();
				}
				// OPEN FINGER e.g. 1
				else{
					servos.openServo(mo.firstObj)
					result += servos.writePositions();						
				}	
			}
			//OPEN HAND
			else {
					for(var i=1; i<=5; i++){
						servos.openServo(i)
					}
					result += servos.writePositions();
			}
		}
		// CLOSE STATEMENT
		else if (ss.co !== null){
			var mo = ss.co as MoveObject
			//CLOSE FIGER					
			if (mo.firstObj != 0){
				// CLOSE FINGER e.g. 1-5
				if (mo.lastObj != 0){
					for(var i=mo.firstObj; i<=mo.lastObj; i++){
						servos.closeServo(i)
					}
					result += servos.writePositions();
				}
				// CLOSE FINGER e.g. 1
				else{
					servos.closeServo(mo.firstObj)
					result += servos.writePositions();						
				}		
			}
			//CLOSE HAND
			else {
					for(var i=1; i<=5; i++){
						servos.closeServo(i)
					}
					result += servos.writePositions()
			}											
		}		
		return result
	}
}

abstract class IFileName {
	def String fileName(Resource resource)
}

class ArduinoFileName extends IFileName{
	override String fileName(Resource resource) { return resource.URI.lastSegment.replace(".rm", "\\") + resource.URI.lastSegment.replace(".rm", ".ino")
	}
}
class RobotArmFileName extends IFileName{
	override String fileName(Resource resource) { return resource.URI.lastSegment.replace(".rm", "\\") + resource.URI.lastSegment.replace(".rm", ".ino")
	}
}

/** TRAVERSE END */
